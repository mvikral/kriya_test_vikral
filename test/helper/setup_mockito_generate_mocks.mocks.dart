// Mocks generated by Mockito 5.0.16 from annotations
// in kriya_test_vikral/test/helper/setup_mockito_generate_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: unnecessary_overrides

import 'dart:async' as _i8;
import 'dart:convert' as _i11;
import 'dart:typed_data' as _i12;

import 'package:dartz/dartz.dart' as _i2;
import 'package:http/http.dart' as _i6;
import 'package:http/src/base_request.dart' as _i13;
import 'package:http/src/response.dart' as _i3;
import 'package:http/src/streamed_response.dart' as _i4;
import 'package:internet_connection_checker/internet_connection_checker.dart'
    as _i5;
import 'package:kriya_test_vikral/features/purchase/data/datasources/purchase_remote_data_implementations.dart'
    as _i15;
import 'package:kriya_test_vikral/features/purchase/domain/entities/product.dart'
    as _i10;
import 'package:kriya_test_vikral/features/purchase/domain/repositories/purchase_repository_contract.dart'
    as _i7;
import 'package:kriya_test_vikral/global/error/failures.dart' as _i9;
import 'package:kriya_test_vikral/global/network/network_info.dart' as _i14;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeResponse_1 extends _i1.Fake implements _i3.Response {}

class _FakeStreamedResponse_2 extends _i1.Fake implements _i4.StreamedResponse {
}

class _FakeDuration_3 extends _i1.Fake implements Duration {}

class _FakeAddressCheckResult_4 extends _i1.Fake
    implements _i5.AddressCheckResult {}

class _FakeClient_5 extends _i1.Fake implements _i6.Client {}

/// A class which mocks [IPurchaseRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIPurchaseRepository extends _i1.Mock
    implements _i7.IPurchaseRepository {
  MockIPurchaseRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.Either<_i9.Failure, List<_i10.Product>>> fetchAllProducts() =>
      (super.noSuchMethod(Invocation.method(#fetchAllProducts, []),
              returnValue:
                  Future<_i2.Either<_i9.Failure, List<_i10.Product>>>.value(
                      _FakeEither_0<_i9.Failure, List<_i10.Product>>()))
          as _i8.Future<_i2.Either<_i9.Failure, List<_i10.Product>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i6.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i3.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i3.Response>.value(_FakeResponse_1()))
          as _i8.Future<_i3.Response>);
  @override
  _i8.Future<_i3.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i3.Response>.value(_FakeResponse_1()))
          as _i8.Future<_i3.Response>);
  @override
  _i8.Future<_i3.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i11.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i3.Response>.value(_FakeResponse_1()))
          as _i8.Future<_i3.Response>);
  @override
  _i8.Future<_i3.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i11.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i3.Response>.value(_FakeResponse_1()))
          as _i8.Future<_i3.Response>);
  @override
  _i8.Future<_i3.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i11.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i3.Response>.value(_FakeResponse_1()))
          as _i8.Future<_i3.Response>);
  @override
  _i8.Future<_i3.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i11.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i3.Response>.value(_FakeResponse_1()))
          as _i8.Future<_i3.Response>);
  @override
  _i8.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i8.Future<String>);
  @override
  _i8.Future<_i12.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i12.Uint8List>.value(_i12.Uint8List(0)))
          as _i8.Future<_i12.Uint8List>);
  @override
  _i8.Future<_i4.StreamedResponse> send(_i13.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue:
                  Future<_i4.StreamedResponse>.value(_FakeStreamedResponse_2()))
          as _i8.Future<_i4.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [InternetConnectionChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockInternetConnectionChecker extends _i1.Mock
    implements _i5.InternetConnectionChecker {
  MockInternetConnectionChecker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i5.AddressCheckOptions> get addresses =>
      (super.noSuchMethod(Invocation.getter(#addresses),
              returnValue: <_i5.AddressCheckOptions>[])
          as List<_i5.AddressCheckOptions>);
  @override
  set addresses(List<_i5.AddressCheckOptions>? _addresses) =>
      super.noSuchMethod(Invocation.setter(#addresses, _addresses),
          returnValueForMissingStub: null);
  @override
  Duration get checkInterval =>
      (super.noSuchMethod(Invocation.getter(#checkInterval),
          returnValue: _FakeDuration_3()) as Duration);
  @override
  set checkInterval(Duration? _checkInterval) =>
      super.noSuchMethod(Invocation.setter(#checkInterval, _checkInterval),
          returnValueForMissingStub: null);
  @override
  _i8.Future<bool> get hasConnection =>
      (super.noSuchMethod(Invocation.getter(#hasConnection),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  _i8.Future<_i5.InternetConnectionStatus> get connectionStatus =>
      (super.noSuchMethod(Invocation.getter(#connectionStatus),
              returnValue: Future<_i5.InternetConnectionStatus>.value(
                  _i5.InternetConnectionStatus.connected))
          as _i8.Future<_i5.InternetConnectionStatus>);
  @override
  _i8.Stream<_i5.InternetConnectionStatus> get onStatusChange =>
      (super.noSuchMethod(Invocation.getter(#onStatusChange),
              returnValue: Stream<_i5.InternetConnectionStatus>.empty())
          as _i8.Stream<_i5.InternetConnectionStatus>);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  bool get isActivelyChecking =>
      (super.noSuchMethod(Invocation.getter(#isActivelyChecking),
          returnValue: false) as bool);
  @override
  _i8.Future<_i5.AddressCheckResult> isHostReachable(
          _i5.AddressCheckOptions? options) =>
      (super.noSuchMethod(Invocation.method(#isHostReachable, [options]),
              returnValue: Future<_i5.AddressCheckResult>.value(
                  _FakeAddressCheckResult_4()))
          as _i8.Future<_i5.AddressCheckResult>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i14.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PurchaseRemoteData].
///
/// See the documentation for Mockito's code generation for more information.
class MockPurchaseRemoteData extends _i1.Mock
    implements _i15.PurchaseRemoteData {
  MockPurchaseRemoteData() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Client get client => (super.noSuchMethod(Invocation.getter(#client),
      returnValue: _FakeClient_5()) as _i6.Client);
  @override
  _i8.Future<List<_i10.Product>> fetchAllProducts() =>
      (super.noSuchMethod(Invocation.method(#fetchAllProducts, []),
              returnValue: Future<List<_i10.Product>>.value(<_i10.Product>[]))
          as _i8.Future<List<_i10.Product>>);
  @override
  String toString() => super.toString();
}
